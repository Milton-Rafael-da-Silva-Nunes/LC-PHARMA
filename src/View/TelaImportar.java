/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Categoria.Categoria;
import Categoria.CategoriaDAO;
import Conexao.GenericDAO;
import Fabricante.Fabricante;
import Fabricante.FabricanteDAO;
import Versao.VersaoDAO;
import Versao.Versao;
import Produto.Produto;
import Produto.ProdutoDAO;
import ProdutoPreco.ProdutoPreco;
import ProdutoPreco.ProdutoPrecoDAO;
import Util.Funcoes;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import jxl.Sheet;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.read.biff.BiffException;

/**
 *
 * @author MIGRAÇÃO-PC
 */
public class TelaImportar extends javax.swing.JDialog {

    Versao versao = new Versao();

    ArrayList<Fabricante> listaFabricante = new ArrayList<>();
    ArrayList<Categoria> listaCategoria = new ArrayList<>();
    ArrayList<Versao> listaVersao = new ArrayList<>();
    ArrayList<Produto> listaProdutoSistema = new ArrayList<>();
    ArrayList<String> listaBarrasSistema = new ArrayList<>();

    TreeMap mapaFabricante = new TreeMap();
    TreeMap mapaCategoria = new TreeMap();

    Workbook workbook = null;
    Sheet sheet = null;
    int linhas;

    /**
     * Creates new form TelaImportar
     *
     * @param parent
     * @param modal
     */
    public TelaImportar(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    private void sel() {
        try {
            jfc_localizarArqAtualizacao.setDialogTitle("Escolha o Arquivo que deseja importar");
            int i = jfc_localizarArqAtualizacao.showDialog(null, "Selecionar");
            if (i != 1) {
                File selectedFile = jfc_localizarArqAtualizacao.getSelectedFile();
                if (selectedFile.getName().contains(".xls") || selectedFile.getName().contains(".XLS")) {
                    jtf_caminhoArq.setText(selectedFile.getPath());

                } else {
                    JOptionPane.showMessageDialog(this, "Formato de arquivo Inválido!!!");
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaImportar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jfc_localizarArqAtualizacao = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jbt_sair = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jcb_referencia = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtf_caminhoArq = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jbt_executar = new javax.swing.JButton();
        jtf_linhaArq = new newpackage.CampoTexto();

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Vigência");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("LC PHARMA - IMPORTAR");
        setUndecorated(true);
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 17)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Importar tabela de medicamentos da ANVISA");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jbt_sair.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbt_sair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/door_in.png"))); // NOI18N
        jbt_sair.setMnemonic('i');
        jbt_sair.setText("Sair");
        jbt_sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_sairActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setText("Linha:");

        jcb_referencia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01/01/2023", "01/02/2023", "01/03/2023", "01/04/2023", "01/05/2023", "01/06/2023", "01/07/2023", "01/08/2023", "01/09/2023", "01/10/2023", "01/11/2023", "01/12/2023", "01/01/2024", "01/02/2024", "01/03/2024", "01/04/2024", "01/05/2024", "01/06/2024", "01/07/2024", "01/08/2024", "01/09/2024", "01/10/2024", "01/11/2024", "01/12/2024", "01/01/2025", "01/02/2025", "01/03/2025", "01/04/2025", "01/05/2025", "01/06/2025", "01/07/2025", "01/08/2025", "01/09/2025", "01/10/2025", "01/11/2025", "01/12/2025", "01/01/2026", "01/02/2026", "01/03/2026", "01/04/2026", "01/05/2026", "01/06/2026", "01/07/2026", "01/08/2026", "01/09/2026", "01/10/2026", "01/11/2026", "01/12/2026" }));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("Referência:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Caminho do arquivo ANVISA:");

        jtf_caminhoArq.setEditable(false);
        jtf_caminhoArq.setBackground(new java.awt.Color(255, 255, 102));
        jtf_caminhoArq.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/zoom.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jbt_executar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbt_executar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/arrow_refresh.png"))); // NOI18N
        jbt_executar.setMnemonic('e');
        jbt_executar.setText("Importar");
        jbt_executar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_executarActionPerformed(evt);
            }
        });

        jtf_linhaArq.setText("Linha");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jtf_caminhoArq)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jbt_executar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbt_sair)))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jtf_linhaArq, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jcb_referencia, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbt_executar, jbt_sair});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_caminhoArq))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcb_referencia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtf_linhaArq, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbt_sair)
                    .addComponent(jbt_executar))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jcb_referencia, jtf_caminhoArq});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbt_sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_sairActionPerformed
        dispose();
    }//GEN-LAST:event_jbt_sairActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        JFileChooser arquivo = new JFileChooser("./");
//        arquivo.setDialogTitle("Selecione uma Imagem"); //titulo da caixa de pesquisa
//        arquivo.setFileSelectionMode(JFileChooser.FILES_ONLY); //forma de selecção, no caso uma imagem de cada vez
//
//        int opc = arquivo.showOpenDialog(this);
//
//        if (opc == JFileChooser.APPROVE_OPTION) {
//            File file = new File("path");
//            file = arquivo.getSelectedFile(); //receb o caminho
//            String nome = file.getAbsolutePath();
//
//            jtf_caminhoArq.setText(nome);
//
//        }
        sel();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jbt_executarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_executarActionPerformed
        try {
            executar();
        } catch (Exception ex) {
            Logger.getLogger(TelaImportar.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jbt_executarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaImportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaImportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaImportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaImportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaImportar dialog = new TelaImportar(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbt_executar;
    private javax.swing.JButton jbt_sair;
    private javax.swing.JComboBox<String> jcb_referencia;
    private javax.swing.JFileChooser jfc_localizarArqAtualizacao;
    private javax.swing.JTextField jtf_caminhoArq;
    private newpackage.CampoTexto jtf_linhaArq;
    // End of variables declaration//GEN-END:variables

    private void iniciaProcessoDeImportacao(int linha) throws IOException, BiffException, Exception {
        File fileXLS = new File(jtf_caminhoArq.getText().replace("/", "\\"));
        WorkbookSettings conf = new WorkbookSettings();
        conf.setEncoding("ISO-8859-1");
        workbook = Workbook.getWorkbook(fileXLS, conf);
        sheet = workbook.getSheet(0);
        linhas = sheet.getRows();
    }

    private void finalizaProcessoDeImportacao() {
        workbook = null;
        sheet = null;
        linhas = 0;
        listaCategoria.clear();
        listaFabricante.clear();
        listaVersao.clear();
        mapaCategoria.clear();
        mapaFabricante.clear();
    }

    private boolean podeAdicionarFabricante(Fabricante f) throws Exception {
        boolean pode = true;
        listaFabricante = new FabricanteDAO().listaFabricante();
        for (int i = 0; i < listaFabricante.size(); i++) {
            if (Funcoes.cnpjBase(listaFabricante.get(i).getCnpj().trim()).equals(Funcoes.cnpjBase(f.getCnpj().trim()))) {
                pode = false;
                break;
            }
        }

        return pode;
    }

    private boolean podeAdicionarCategoria(Categoria c) throws SQLException {
        boolean pode = true;
        listaCategoria = new CategoriaDAO().listaCategoria();
        for (int i = 0; i < listaCategoria.size(); i++) {
            if (!listaCategoria.get(i).getNome().trim().equals(c.getNome().trim())
                    && !c.getNome().trim().equals("")
                    && !c.getNome().trim().equals("-(*)")
                    && !c.getNome().trim().equals("-")) {
                pode = true;
            } else {
                pode = false;
                break;
            }
        }
        return pode;
    }

    private void insertVersao() throws Exception {
        listaVersao.clear();
        listaVersao = new VersaoDAO().listaVersao();

        versao.setVersao(listaVersao.isEmpty() ? 1 : (listaVersao.get(listaVersao.size() - 1).getVersao() + 1));
        versao.setData_vigencia(Funcoes.formataData((String) jcb_referencia.getSelectedItem(), "E", true));
        versao.setData_hora(Funcoes.dataHoraAtual());
        new VersaoDAO().insert(versao);
        versao.setId(Funcoes.getUltimoId());
    }

    private void insertFabricante(int linha) throws Exception {
        listaFabricante.clear();
        mapaFabricante.clear();
        FabricanteDAO fDao = new FabricanteDAO();
        for (int i = linha; i < linhas; i++) {
            if (!sheet.getCell(2, i).getContents().trim().equals("")) {
                Fabricante fabricante = new Fabricante();
                fabricante.setCnpj(sheet.getCell(1, i).getContents().trim());
                fabricante.setNome(sheet.getCell(2, i).getContents().trim().substring(0, Math.min(80, sheet.getCell(2, i).getContents().trim().length())));
                fabricante.setDescricao(sheet.getCell(2, i).getContents().trim());

                if (podeAdicionarFabricante(fabricante)) {
                    listaFabricante.add(fabricante);
                    fDao.insertFabricante(fabricante);
                }
            }
        }
        for (Fabricante f : listaFabricante) {
            mapaFabricante.put(Funcoes.cnpjBase(f.getCnpj()), f.getId());
        }
    }

    private void insertCategoria(int linha) throws Exception {
        listaCategoria.clear();
        mapaCategoria.clear();
        CategoriaDAO cDao = new CategoriaDAO();
        for (int i = linha; i < linhas; i++) {
            Categoria c = new Categoria();
            c.setNome(sheet.getCell(11, i).getContents().trim());
            if (podeAdicionarCategoria(c)) {
                listaCategoria.add(c);
                cDao.insertCategoria(c);
            }
        }

        for (Categoria c : listaCategoria) {
            mapaCategoria.put(c.getNome(), c.getId());
        }

    }

    private void insertProduto(int linha) throws Exception {
        ProdutoDAO pDao = new ProdutoDAO();
        ProdutoPrecoDAO prDao = new ProdutoPrecoDAO();
        VersaoDAO vDao = new VersaoDAO();

        listaProdutoSistema.clear();
        listaProdutoSistema = pDao.listaProdutoBarras("%%");
        listaBarrasSistema.clear();
        listaBarrasSistema = pDao.listaCodigoBarras();

        Versao versaoAntiga = vDao.getVersaoAnterior(versao.getVersao() - 1);
        List<ProdutoPreco> produtoPrecos = prDao.listaProdutoPreco(versaoAntiga.getId());

        for (int i = linha; i < linhas; i++) {
            if (!sheet.getCell(11, i).getContents().trim().equals("")) {

                Produto p = new Produto();
                ProdutoPreco pr = new ProdutoPreco();

                if (Funcoes.cnpjBase(sheet.getCell(1, i).getContents().trim()).equals("")
                        || Funcoes.cnpjBase(sheet.getCell(1, i).getContents().trim()) == null) {
                    p.setId_fabricante(1);
                } else {
                    p.setId_fabricante((int) mapaFabricante.get(Funcoes.cnpjBase(sheet.getCell(1, i).getContents().trim())));
                }

                if (sheet.getCell(11, i).getContents().trim().equals("") || sheet.getCell(11, i).getContents().trim().equals("-(*)") || sheet.getCell(11, i).getContents().trim().equals("-")) {
                    p.setId_categoria(1);
                } else {
                    p.setId_categoria((int) mapaCategoria.get(sheet.getCell(11, i).getContents().trim()));;
                }

                String codigo_ggrem = sheet.getCell(3, i).getContents().trim().replaceAll("\\D", "").replace("\n", "");
                String codigo_barras = sheet.getCell(5, i).getContents().trim().replaceAll("\\D", "").replace("\n", "");
                String codigo_barras2 = sheet.getCell(6, i).getContents().trim().replaceAll("\\D", "").replace("\n", "");
                String codigo_barras3 = sheet.getCell(7, i).getContents().trim().replaceAll("\\D", "").replace("\n", "");

                p.setSubstancia(sheet.getCell(0, i).getContents().trim().replace("\n", ""));
                p.setCodigo_ggrem(codigo_ggrem);
                p.setRegistro(sheet.getCell(4, i).getContents().trim().replaceAll("\\D", "").replace("\n", ""));

                p.setEan1(codigo_barras);
                p.setEan2(codigo_barras2);
                p.setEan3(codigo_barras3);
                p.setProduto(sheet.getCell(8, i).getContents().trim().replace("\n", ""));
                p.setApresentacao(sheet.getCell(9, i).getContents().trim().replace("\n", ""));
                p.setClasse_terapeutica(sheet.getCell(10, i).getContents().trim().replace("\n", ""));
                p.setRegime_preco(sheet.getCell(12, i).getContents().trim().replace("\n", ""));
                p.setRestricao_hospitalar(sheet.getCell(38, i).getContents().trim().replace("\n", ""));
                p.setCap(sheet.getCell(39, i).getContents().trim().replace("\n", ""));
                p.setConfaz_87(sheet.getCell(40, i).getContents().trim().replace("\n", ""));
                p.setIcms_0(sheet.getCell(41, i).getContents().trim().replace("\n", ""));
                p.setLista(sheet.getCell(43, i).getContents().trim().replace("\n", ""));
                p.setComercializacao_ano_anterior(sheet.getCell(44, i).getContents().trim().replace("\n", ""));
                p.setTarja(sheet.getCell(45, i).getContents().trim().replace("\n", ""));

                //produtoPreco
                pr.setId_versao(versao.getId());
                pr.setPrecocusto_sem_imposto(Double.parseDouble(sheet.getCell(13, i).getContents().equals("") ? "0" : sheet.getCell(13, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_0(Double.parseDouble(sheet.getCell(14, i).getContents().equals("") ? "0" : sheet.getCell(14, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_12(Double.parseDouble(sheet.getCell(15, i).getContents().equals("") ? "0" : sheet.getCell(15, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_17(Double.parseDouble(sheet.getCell(16, i).getContents().equals("") ? "0" : sheet.getCell(16, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_17_5(Double.parseDouble(sheet.getCell(18, i).getContents().equals("") ? "0" : sheet.getCell(18, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_18(Double.parseDouble(sheet.getCell(20, i).getContents().equals("") ? "0" : sheet.getCell(20, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_19(Double.parseDouble(sheet.getCell(22, i).getContents().equals("") ? "0" : sheet.getCell(22, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_20(Double.parseDouble(sheet.getCell(23, i).getContents().equals("") ? "0" : sheet.getCell(23, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_21(Double.parseDouble(sheet.getCell(24, i).getContents().equals("") ? "0" : sheet.getCell(24, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_22(Double.parseDouble(sheet.getCell(25, i).getContents().equals("") ? "0" : sheet.getCell(25, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_17_alc(Double.parseDouble(sheet.getCell(17, i).getContents().equals("") ? "0" : sheet.getCell(17, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_17_5_alc(Double.parseDouble(sheet.getCell(19, i).getContents().equals("") ? "0" : sheet.getCell(19, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecocusto_18_alc(Double.parseDouble(sheet.getCell(21, i).getContents().equals("") ? "0" : sheet.getCell(21, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_0(Double.parseDouble(sheet.getCell(26, i).getContents().equals("") ? "0" : sheet.getCell(26, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_12(Double.parseDouble(sheet.getCell(27, i).getContents().equals("") ? "0" : sheet.getCell(27, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_17(Double.parseDouble(sheet.getCell(28, i).getContents().equals("") ? "0" : sheet.getCell(28, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_17_5(Double.parseDouble(sheet.getCell(30, i).getContents().equals("") ? "0" : sheet.getCell(30, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_18(Double.parseDouble(sheet.getCell(32, i).getContents().equals("") ? "0" : sheet.getCell(32, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_19(Double.parseDouble(sheet.getCell(34, i).getContents().equals("") ? "0" : sheet.getCell(34, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_20(Double.parseDouble(sheet.getCell(35, i).getContents().equals("") ? "0" : sheet.getCell(35, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_21(Double.parseDouble(sheet.getCell(36, i).getContents().equals("") ? "0" : sheet.getCell(36, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_22(Double.parseDouble(sheet.getCell(37, i).getContents().equals("") ? "0" : sheet.getCell(37, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_17_alc(Double.parseDouble(sheet.getCell(29, i).getContents().equals("") ? "0" : sheet.getCell(29, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_17_5_alc(Double.parseDouble(sheet.getCell(31, i).getContents().equals("") ? "0" : sheet.getCell(31, i).getContents().replace(",", ".").replace("\n", "")));
                pr.setPrecovenda_18_alc(Double.parseDouble(sheet.getCell(33, i).getContents().equals("") ? "0" : sheet.getCell(33, i).getContents().replace(",", ".").replace("\n", "")));

                if (listaBarrasSistema.isEmpty()) {
                    pDao.insertProduto(p);
                } else {
                    if (!listaBarrasSistema.contains(codigo_ggrem)) {
                        pDao.insertProduto(p);
                    } else {
                        pDao.updateProduto(p, codigo_ggrem);
                        p.setId(getIdProduto(codigo_ggrem));
                    }
                }

                Double totalPrecosAtual
                        = pr.getPrecocusto_sem_imposto()
                        + pr.getPrecocusto_0()
                        + pr.getPrecocusto_12()
                        + pr.getPrecocusto_17()
                        + pr.getPrecocusto_17_5()
                        + pr.getPrecocusto_18()
                        + pr.getPrecocusto_19()
                        + pr.getPrecocusto_20()
                        + pr.getPrecocusto_21()
                        + pr.getPrecocusto_22()
                        + pr.getPrecocusto_17_alc()
                        + pr.getPrecocusto_17_5_alc()
                        + pr.getPrecocusto_18_alc()
                        + pr.getPrecovenda_0()
                        + pr.getPrecovenda_12()
                        + pr.getPrecovenda_17()
                        + pr.getPrecovenda_17_5()
                        + pr.getPrecovenda_18()
                        + pr.getPrecovenda_19()
                        + pr.getPrecovenda_20()
                        + pr.getPrecovenda_21()
                        + pr.getPrecovenda_22()
                        + pr.getPrecovenda_17_alc()
                        + pr.getPrecovenda_17_5_alc()
                        + pr.getPrecovenda_18_alc();

                Double totalPrecosAnterior = 0.0;

                for (ProdutoPreco pp : produtoPrecos) {
                    if (pp.getId_produto() == p.getId()) {
                        totalPrecosAnterior
                                = pp.getPrecocusto_sem_imposto()
                                + pp.getPrecocusto_0()
                                + pp.getPrecocusto_12()
                                + pp.getPrecocusto_17()
                                + pp.getPrecocusto_17_5()
                                + pp.getPrecocusto_18()
                                + pp.getPrecocusto_19()
                                + pp.getPrecocusto_20()
                                + pp.getPrecocusto_21()
                                + pp.getPrecocusto_22()
                                + pp.getPrecocusto_17_alc()
                                + pp.getPrecocusto_17_5_alc()
                                + pp.getPrecocusto_18_alc()
                                + pp.getPrecovenda_0()
                                + pp.getPrecovenda_12()
                                + pp.getPrecovenda_17()
                                + pp.getPrecovenda_17_5()
                                + pp.getPrecovenda_18()
                                + pp.getPrecovenda_19()
                                + pp.getPrecovenda_20()
                                + pp.getPrecovenda_21()
                                + pp.getPrecovenda_22()
                                + pp.getPrecovenda_17_alc()
                                + pp.getPrecovenda_17_5_alc()
                                + pp.getPrecovenda_18_alc();
                        break;
                    }
                }

                String podeAtualizar = Funcoes.formatoDouble2Casas(totalPrecosAnterior).equals(Funcoes.formatoDouble2Casas(totalPrecosAtual)) ? "N" : "S";
//
//            System.out.println("------------------------------------------------------------------");
//            System.out.println("p.getId(: " + p.getId());
//            System.out.println("totalPrecosAtual: " + Funcoes.formatoDouble2Casas(totalPrecosAtual));
//            System.out.println("totalPrecosAnterior: " + Funcoes.formatoDouble2Casas(totalPrecosAnterior));
//            System.out.println("podeAtualizar: " + podeAtualizar);
                prDao.insereProdutoPreco(pr, p, podeAtualizar);

                System.out.println(i);
            }
        }
    }

    private int getIdProduto(String codigoGgrem) {
        int id = 0;
        if (!listaProdutoSistema.isEmpty()) {
            for (Produto p : listaProdutoSistema) {
                if (p.getCodigo_ggrem().equals(codigoGgrem)) {
//                if (p.getEan1().equals(codigoBarras)) {
                    id = p.getId();
                    break;
                }
            }
        }
        return id;
    }

    private void teste() throws Exception {
        listaBarrasSistema.clear();
        listaBarrasSistema = new ProdutoDAO().listaCodigoBarras();

        if (listaBarrasSistema.contains("7891058020958")) {
            System.out.println("tem");
        } else {
            System.out.println("nao tem");
        }

    }

    //botoes
    private void executar() throws Exception {
        Connection com = new GenericDAO().getConnection();
        com.setAutoCommit(false);
        try {
            if (!jtf_caminhoArq.getText().equals("") && !jtf_linhaArq.getText().equals("")) {
                iniciaProcessoDeImportacao(Integer.parseInt(jtf_linhaArq.getText()));
                insertVersao();
                insertFabricante(Integer.parseInt(jtf_linhaArq.getText()));
                insertCategoria(Integer.parseInt(jtf_linhaArq.getText()));
                insertProduto(Integer.parseInt(jtf_linhaArq.getText()));
                finalizaProcessoDeImportacao();
                com.commit();
                JOptionPane.showMessageDialog(null, "Tabela importada com sucesso!");
            } else {
                JOptionPane.showMessageDialog(null, "Selecione uma tabela a ser importada e/ou preencha a linha!");
            }
        } catch (Exception ex) {
            com.rollback();
            ex.printStackTrace();
            throw new Exception("ROLLBACK ATIVADO, ESTA TRANSAÇÃO SERÁ DESFEITA\n" + ex.getMessage());
        } finally {
            com.setAutoCommit(true);
        }
    }
}
